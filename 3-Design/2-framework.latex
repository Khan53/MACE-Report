\section{Framework}
%Here we describe all of our incredible code and how it will change the world.
%Basic flow of the system
%Agents, environment, groups, Feedback Loops.
%ASSIGN TO: Olly

The framework, on which the simulations were built and forms the core of MACE,
was itself built on the multi-agent simulation system Presage
\footnote{\url{https://sites.google.com/site/presageproject}, \url{http://sammacbeth.github.com/Presage/}}.
Presage is a `time' driven system:
the simulations is divided into discrete cycles, in which each participant
processes any queued inputs, and respond with any appropriate actions.
The environment, which represents the world in which
the participants are acting, processed these actions and, if applicable, send
inputs to participants informing them of changes that might have taken place.
The messaging framework is designed to be primarily asynchronous, with the
information not being processed until the following cycle, but allows for
synchronous messaging via clever use of code.

The purpose of the framework was to allow a number of agents to play the
grouping and stag games.
To this end, it was implemented as an abstraction and
a security layer, simultaneously defining a simple interface between agent code
and the environment and simulation layers, whilst also not allowing the agents to
cheat. Three major classes were implemented:
\begin{itemize}
\item{
The Evironment, which models the world and holds all relevant data,
such as what animals exist and the status of agents;
}
\item{
The AbstractAgent, which models the hunters themselves and wraps around both the hunter's
data model and the set of actions that they may perform (and when they may perform them)
}
\item{
The AbstractGroup, which models a group (or tribe) of agents, wrapping around the backing
model and the actions the groups can perform
}
\end{itemize}

\begin{figure}[p]
  \caption{TODO: Write some words about this}
  \label{framework-flow}
  \pgraphic{framework}
\end{figure}

The actual simulation uses Agents and Groups that are derived from the
AbstractAgent and AbstractGroup, which are treated as hostile code - in the
future, these classes may be written by parties that wish to break the rues of
the system, so the interactions have to a mediated and controlled by the
Abstract implementations.
This was achieved by implementing many members as
private (including all data members), and any non-private members were declared
as `final', thus stopping derived classes from altering their functionality.
The remainder of the code was formed as a number of protected abstract methods,
which need to be implemented by the revived agent or group, which are used for
all interactions.

Due to the overall complexity of the three games when combined, and the default
asynchronous nature of the underlying framework, we opted to have each round
of the games being execute over a number of cycles, each with a well defined
purpose, defined in the TurnType enumerator.
Every cycle, the three primary
framework classes check what turn it currently is, and evecute the relevant
methods; these will include calling the appropriate abstract methods (that will
have been implemented by the derived code).
The flow is shown in figure \ref{framework-flow} (page \pageref{framework-flow}).

\subsection{Alterations to Underlying Code}

Due to the current builds of Presage being in beta, a number of changes were
made to the supplied code. Nearly all of these were purely cosmetic improvements
and alterations to update the code to the standards of the current production
version of the Java standard library, such as the use of generic types for
lists and iterators.
Another of these changes, which was key for later validation
of the code was the replacement of the `temporary' debugging code with a
thread safe logging system, based off the standard libraries Logger class.

Presage's execution loop was also altered in order to make it safe for dynamic
introduction of participants, such as emergent groups, by iterating over the
set of Participants manually, and marking each that had been executed (See
snippet \ref{ParticipantLoop}, page \pageref{ParticipantLoop}).
This uses the same strict ordering as the original code, using the 
fundamental String Comparator, and, therefore, guarantees the same 
deterministic order of execution when no participants are added during execution.

The result when a new participant is added is a deterministic function of the
new particpant's identifier: it will be executed in the correct point in the
sequence if it's `greater than' than the participant that caused it to be created,
or it will be dealt with last if it was `less than'.
Regardless, it is still guaranteed to be executed in the current cycle.

\subsection{Security Model}
\begin{figure}[b]
  \label{uml_security}
  \caption{TODO: Write about this diagram}
  \pgraphic{uml_security}
\end{figure}

Due to a combination of Java's security management, and Presage's liberal
permissions model, security was implemented in a number of different ways
in different parts of the framework, which is outlined in figure
\ref{uml_security}.
The Enivronment was protected by the Environment Connections, a concept
that already existed in Presage, meaning that only the Simulation, Plugins
and the Environment intself could get a reference to the Environment of the
current simulation.
Although plugins are not considered trusted code, and can also interact with
agent's implementation code, this protection was considered sufficient;
this decision relates to the fact that the Plugin interface requires a
reference to the Simulation object at initialisation time.

\subsection{Environment}

\begin{figure}[p]
  \label{uml_env}
  \caption{TODO: Write about this}
  \pgraphic{uml_environment}
\end{figure}

\subsection{Agents}

\begin{figure}[p]
  \label{uml_agent}
  \caption{TODO: Write about this}
  \pgraphic{uml_agent}
\end{figure}

\subsection{Groups}

\subsubsection{Free Agent Groups}

TODO: Discuss the meanings of different turns \\
TODO: Mentions the free agent group \\
TODO: Describe why some things are synchronous \\
TODO: Possibly discuss how the encapsulation works \\
TODO: Make reference to the repeatability parameters

